## Definitions
##CI pipeline is nothing but a Jenkins job, type of Jenkins pipeline. It doesn't know any business logic of how a service is going to compile & test. It's more like a generic pipeline, which accepts list of task definition and perform them one by one.
##Each build.yaml is combined with several sub-tasks,

---
name: promos.nextjs-boilerplate
kind: service
tasks:
  ##- **prebuild**: Tasks (shell scripts) defined in this stage will be executed at the very begining. We usually inject some build related information (e.g. GIT_COMMIT, GIT_BRANCH) here. Check complete environment variable list below.
  - name: prebuild
    command:
      - echo "Commit something in prebuild"
  ##- **build**: The exact compile/build script. (e.g. mvn install, gradle build). This stage usually includes UT.
  - name: build
    command:
      - node --version
      - yarn --version
      - yarn install --frozen-lockfile --ignore-scripts
      - yarn test-all
    timeout: 15m

  ##- **codescan**: For UT coverage and sonarqube static code scan(sonarqube is not enabled yet due to no sonarqube server here).
  - name: codescan
    kind: Cobertura
    path: './coverage'
    file: 'cobertura-coverage.xml'

  - name: codescan
    kind: SonarScan
    project: nextjs-boilerplate
    analysisOptions:
      - key: sonar.sources
        value: './src'
      - key: sonar.testExecutionReportPaths
        value: './SonarTestResult/sonar-report.xml'
      - key: sonar.javascript.lcov.reportPaths
        value: './coverage/lcov.info'
